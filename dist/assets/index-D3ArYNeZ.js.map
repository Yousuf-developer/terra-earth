{"version":3,"mappings":"w6DAEUA,EAAoB,IACpBC,EAAa,iBAGbC,EAAU,SAAS,eAAeD,CAAU,EAC5CE,EAAW,SAAS,cAAc,YAAY,EAC9CC,EAAc,SAAS,cAAc,eAAe,EACpDC,EAAe,SAAS,cAAc,gBAAgB,EACvC,SAAS,cAAc,gBAAgB,EACvC,SAAS,cAAc,gBAAgB,GAGxD,CAACF,GAAY,CAACC,GAAe,CAACC,IAChC,QAAQ,KAAK,qIAAqI,EAIpJ,SAASC,EAASC,EAAIC,EAAK,IAAK,CAC9B,IAAIC,EACJ,MAAO,IAAIC,IAAS,CAAE,aAAaD,CAAC,EAAGA,EAAI,WAAW,IAAMF,EAAG,GAAGG,CAAI,EAAGF,CAAE,CAAG,CAChF,CAGA,SAASG,EAAWC,EAAS,CACtBV,IACDU,GACFV,EAAQ,OAAS,GACbC,IACFA,EAAS,UAAU,IAAI,UAAU,EACjCA,EAAS,aAAa,gBAAiB,MAAM,GAE/C,SAAS,gBAAgB,UAAU,IAAI,gBAAgB,IAEvDD,EAAQ,OAAS,GACbC,IACFA,EAAS,UAAU,OAAO,UAAU,EACpCA,EAAS,gBAAgB,eAAe,GAE1C,SAAS,gBAAgB,UAAU,OAAO,gBAAgB,GAE9D,CAEA,SAASU,GAAqB,CAC5B,MAAMC,EAAc,OAAO,WAAad,EACxC,OAAAW,EAAWG,CAAW,EACfA,CACT,CAGAD,EAAkB,EAGlB,OAAO,iBAAiB,SAAUP,EAAS,IAAM,CAC/CO,EAAkB,CACpB,EAAG,GAAG,CAAC,EAGP,IAAIE,EAAe,GACfC,EAAqB,GAEzB,eAAeC,GAAsB,CAEnC,GAAI,CAAAD,EACJ,IAAI,OAAO,WAAahB,EAAmB,CAEzC,QAAQ,IAAI,kCAAkC,EAC9C,MACF,CAEAgB,EAAqB,GAGrBZ,EAAY,UAAU,IAAI,UAAU,EACpC,WAAW,SAAY,OACrBC,EAAa,UAAU,IAAI,QAAQ,EACnC,GAAI,CACF,GAAKU,EAcH,QAAQ,IAAI,+BAA+B,MAd1B,CAEjB,MAAMG,EAAM,MAAKC,EAAA,IAAC,OAAO,sBAAa,sBACtCJ,EAAe,GAEXG,GAAO,OAAOA,EAAI,aAAgB,WACpCA,EAAI,YAAW,EACN,OAAO,OAAO,aAAgB,WACvC,OAAO,YAAW,EAElB,QAAQ,KAAK,2FAA2F,CAE5G,CAIF,OAASE,EAAK,CACZ,QAAQ,MAAM,wCAAyCA,CAAG,EAE1D,MAAMC,EAAI,SAAS,cAAc,GAAG,EACpCA,EAAE,MAAM,MAAQ,SAChBA,EAAE,YAAc,0DAChBC,EAAAjB,EAAa,cAAc,iBAAiB,IAA5C,MAAAiB,EAA+C,YAAYD,EAC7D,QAAC,CACCL,EAAqB,EACvB,CACF,EAAG,GAAG,EACR,CAGIb,IACFA,EAAS,iBAAiB,QAAU,GAAM,CACxC,EAAE,eAAc,EACZ,CAAAA,EAAS,UAAU,SAAS,UAAU,GAC1Cc,EAAmB,CACrB,CAAC,EAGDd,EAAS,iBAAiB,UAAY,GAAM,CAC1C,GAAI,EAAE,MAAQ,SAAW,EAAE,MAAQ,IAAK,CAEtC,GADA,EAAE,eAAc,EACZA,EAAS,UAAU,SAAS,UAAU,EAAG,OAC7Cc,EAAmB,CACrB,CACF,CAAC,GAIH,OAAO,qBAAwBM,GACUZ,EAAnC,OAAOY,GAAU,UAA6BA,EAChC,OAAO,WAAavB,CADiB","names":["MIN_DESKTOP_WIDTH","BLOCKER_ID","blocker","enterBtn","bodyWrapper","loaderScreen","debounce","fn","ms","t","args","setBlocked","blocked","checkWidthAndBlock","shouldBlock","moduleLoaded","moduleInitializing","startExperienceFlow","mod","__vitePreload","err","p","_a","force"],"ignoreList":[],"sources":["../../src/index.html?html-proxy&index=1.js"],"sourcesContent":["\n    // ---------- Configuration ----------\n    const MIN_DESKTOP_WIDTH = 1000;\n    const BLOCKER_ID = 'mobile-blocker';\n\n    // ---------- DOM refs ----------\n    const blocker = document.getElementById(BLOCKER_ID);\n    const enterBtn = document.querySelector('.enter-btn');\n    const bodyWrapper = document.querySelector('.body-wrapper');\n    const loaderScreen = document.querySelector('.loader-screen');\n    const progressFill = document.querySelector('.progress-fill');\n    const progressText = document.querySelector('.progress-text');\n\n    // sanity checks (fail fast if expected DOM is missing)\n    if (!enterBtn || !bodyWrapper || !loaderScreen) {\n      console.warn('Essential DOM nodes missing: enterBtn/bodyWrapper/loaderScreen. Mobile-blocker script will continue but some features may not work.');\n    }\n\n    // ---------- small debounce util ----------\n    function debounce(fn, ms = 120) {\n      let t;\n      return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), ms); };\n    }\n\n    // ---------- block/unblock UI ----------\n    function setBlocked(blocked) {\n      if (!blocker) return;\n      if (blocked) {\n        blocker.hidden = false;\n        if (enterBtn) {\n          enterBtn.classList.add('disabled');\n          enterBtn.setAttribute('aria-disabled', 'true');\n        }\n        document.documentElement.classList.add('device-blocked');\n      } else {\n        blocker.hidden = true;\n        if (enterBtn) {\n          enterBtn.classList.remove('disabled');\n          enterBtn.removeAttribute('aria-disabled');\n        }\n        document.documentElement.classList.remove('device-blocked');\n      }\n    }\n\n    function checkWidthAndBlock() {\n      const shouldBlock = window.innerWidth < MIN_DESKTOP_WIDTH;\n      setBlocked(shouldBlock);\n      return shouldBlock;\n    }\n\n    // run initial check as early as possible\n    checkWidthAndBlock();\n\n    // update on resize (debounced)\n    window.addEventListener('resize', debounce(() => {\n      checkWidthAndBlock();\n    }, 120));\n\n    // ---------- dynamic script loader (only on desktop and after user click) ----------\n    let moduleLoaded = false;\n    let moduleInitializing = false;\n\n    async function startExperienceFlow() {\n      // ensure not double-initializing\n      if (moduleInitializing) return;\n      if (window.innerWidth < MIN_DESKTOP_WIDTH) {\n        // blocked — do nothing\n        console.log('Start blocked: screen too small.');\n        return;\n      }\n\n      moduleInitializing = true;\n\n      // UI transitions (keep your existing timings)\n      bodyWrapper.classList.add('fade-out');\n      setTimeout(async () => {\n        loaderScreen.classList.add('active');\n        try {\n          if (!moduleLoaded) {\n            // dynamic import of your existing script.js (must export initThreeJS)\n            const mod = await import('./script.js');\n            moduleLoaded = true;\n            // call exported function if present, else try global fallback\n            if (mod && typeof mod.initThreeJS === 'function') {\n              mod.initThreeJS();\n            } else if (typeof window.initThreeJS === 'function') {\n              window.initThreeJS();\n            } else {\n              console.warn('script.js loaded but no initThreeJS export found. Ensure script.js exports initThreeJS().');\n            }\n          } else {\n            // already loaded (unlikely in this flow) — maybe the script started itself earlier\n            console.log('script module already loaded.');\n          }\n        } catch (err) {\n          console.error('Failed to load script.js dynamically:', err);\n          // show a visible fallback message on loader-screen if desired\n          const p = document.createElement('p');\n          p.style.color = 'salmon';\n          p.textContent = 'Failed to start experience. Check console for details.';\n          loaderScreen.querySelector('.loader-content')?.appendChild(p);\n        } finally {\n          moduleInitializing = false;\n        }\n      }, 800); // match your original 800ms fade timing\n    }\n\n    // attach enter button handlers (click + keyboard)\n    if (enterBtn) {\n      enterBtn.addEventListener('click', (e) => {\n        e.preventDefault();\n        if (enterBtn.classList.contains('disabled')) return;\n        startExperienceFlow();\n      });\n\n      // keyboard accessibility\n      enterBtn.addEventListener('keydown', (e) => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          if (enterBtn.classList.contains('disabled')) return;\n          startExperienceFlow();\n        }\n      });\n    }\n\n    // expose a tiny dev helper to toggle the blocker from console:\n    window.__toggleDesktopBlock = (force) => {\n      if (typeof force === 'boolean') return setBlocked(force);\n      return setBlocked(window.innerWidth < MIN_DESKTOP_WIDTH);\n    };\n\n    // small UX: if the user resizes above threshold AFTER load but BEFORE clicking Enter,\n    // the blocker will hide and Enter becomes clickable (init happens then).\n  "],"file":"assets/index-D3ArYNeZ.js"}